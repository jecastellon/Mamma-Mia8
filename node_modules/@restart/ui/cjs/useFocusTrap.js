"use strict";

exports.__esModule = true;
exports.useFocusTrap = useFocusTrap;
var _react = require("react");
var _useWindow = _interopRequireDefault(require("./useWindow.js"));
var _useMounted = _interopRequireDefault(require("@restart/hooks/useMounted"));
var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));
var _tabbable = require("./tabbable.js");
var _activeElement = _interopRequireDefault(require("dom-helpers/activeElement"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function useFocusTrap({
  getContainer,
  disabled
}) {
  const ownerWindow = (0, _useWindow.default)();
  const isMounted = (0, _useMounted.default)();
  const listenersRef = (0, _react.useRef)(new Set());
  const handleKeydown = (0, _useEventCallback.default)(event => {
    const container = getContainer();
    if (event.key !== 'Tab' || !container || disabled != null && disabled()) {
      return;
    }
    const tabbables = (0, _tabbable.getTabbableElementsOrSelf)(container);
    const firstTabbable = tabbables[0];
    const lastTabbable = tabbables[tabbables.length - 1];
    if (event.shiftKey && event.target === tabbables[0]) {
      lastTabbable == null ? void 0 : lastTabbable.focus();
      event.preventDefault();
      return;
    }
    if (!event.shiftKey && event.target === lastTabbable || !container.contains(event.target)) {
      firstTabbable == null ? void 0 : firstTabbable.focus();
      event.preventDefault();
    }
  });
  const handleEnforceFocus = (0, _useEventCallback.default)(_event => {
    if (disabled != null && disabled()) {
      return;
    }
    const container = getContainer();
    const currentActiveElement = (0, _activeElement.default)(ownerWindow == null ? void 0 : ownerWindow.document);
    if (container && currentActiveElement && !container.contains(currentActiveElement)) {
      var _tabbables$;
      const tabbables = (0, _tabbable.getTabbableElementsOrSelf)(container);
      (_tabbables$ = tabbables[0]) == null ? void 0 : _tabbables$.focus();
    }
  });
  const start = (0, _react.useCallback)(() => {
    const document = ownerWindow == null ? void 0 : ownerWindow.document;
    if (!ownerWindow || !document || !isMounted()) {
      return;
    }
    ownerWindow.addEventListener('focus', handleFocus, {
      capture: true
    });
    document.addEventListener('keydown', handleKeydown);
    listenersRef.current.add(() => {
      ownerWindow.removeEventListener('focus', handleFocus, {
        capture: true
      });
      document.removeEventListener('keydown', handleKeydown);
    });
    function handleFocus(event) {
      // the timeout is necessary b/c this will run before the new modal is mounted
      // and so steals focus from it
      setTimeout(() => handleEnforceFocus(event));
    }
  }, [handleEnforceFocus]);
  const stop = (0, _react.useCallback)(() => {
    listenersRef.current.forEach(listener => listener());
    listenersRef.current.clear();
  }, []);
  return (0, _react.useMemo)(() => ({
    start,
    stop
  }), [start, stop]);
}